#!/usr/bin/env python

class Edge:
    def __init__(self, first, second, weight):
        self.first = first
        self.second = second
        self.weight = weight
        self.taken = False
        self.discarded = False

    def take(self):
        self.taken = True

    def untake(self):
        self.taken = False

    def discard(self):
        self.discarded = True

    def undiscard(self):
        self.discarded = False

    def getother(self, node):
        if node == self.second:
            return self.first
        else:
            return self.second

    def __repr__(self):
        return ("%s -- %d -- %s") % (self.first.name, self.weight, self.second.name)


class Node:
    def __init__(self, name):
        self.name = name
        self.edges = []

    def addedge(self, edge):
        self.edges.append(edge)

    def taken_edges(self):
        return filter(lambda x: x.taken, self.edges)

    def findnext(self, edge):
        edges = filter(lambda x: x != edge, self.taken_edges())
        if len(edges) == 0:
            return None
        else:
            return edges[0]

    def __str__(self):
        return self.name

class Graph:
    def __init__(self, matrix):
        self.nodes = []
        self.edges = []
        for i, row in enumerate(matrix):
            self.nodes.append(Node(i))
        for node, edges in enumerate(matrix):
            for to, weight in enumerate(edges):
                if to > node and weight != 0:
                    e = Edge(self.nodes[node], self.nodes[to], weight)
                    self.nodes[node].addedge(e)
                    self.nodes[to].addedge(e)
                    self.edges.append(e)

    def clear(self):
        for edge in self.edges:
            edge.untake()
            edge.undiscard()

    def valid(self, edge):
        edge.take()
        for node in self.nodes:
            if len(node.taken_edges()) >= 3:
                edge.untake()
                return False

        start = edge.first
        next_edge = start.findnext(edge)
        if next_edge is None:
            edge.untake()
            return True
        node = start
        while next_edge is not None:
            node = next_edge.getother(node)
            if node == start:
                edge.untake()
                return False
            next_edge = node.findnext(next_edge)
        edge.untake()
        return True
            

    def getnextedge(self):
        edges = filter(lambda x: not x.discarded and not x.taken, self.edges)
        if edges == []:
            return None
        nextedge = min(edges, key = lambda x: x.weight)
        while not self.valid(nextedge):
            nextedge.discard()
            edges = filter(lambda x: not x.discarded and not x.taken, self.edges)
            if edges == []:
                return None
            nextedge = min(edges, key = lambda x: x.weight)
        nextedge.take()
        return nextedge

    def cheapestlink(self):
        edges = []
        edge = self.getnextedge()
        while edge is not None:
            edges.append(edge)
            edge = self.getnextedge()

        endnodes = filter(lambda x: len(x.taken_edges()) == 1, self.nodes)
        last_edge = filter(lambda x: (x.first in endnodes and x.second in endnodes), self.edges)
        self.clear()
        return edges + last_edge

matrix = []
with open("p01_d.txt", "r") as f:
    for x in f:
        numbers = x.split()
        numbers = [int(i) for i in numbers]
        matrix.append(numbers)

structured = Graph(matrix)

d = structured.cheapestlink()
for x in d:
    print "(%s, %s)" % (x.first.name, x.second.name)

print sum(map(lambda x: x.weight, d))
